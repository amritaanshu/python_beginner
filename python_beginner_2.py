# -*- coding: utf-8 -*-
"""python_beginner_2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1f1ivivrUmnnyceJcpYv3r9aLOpOR1ISq
"""

#sets
set1 = {"roger", "syd"}
set2 = {"roger"}
intersect = set1 & set2
mod1 = set1 | set2
mod2 = set1 - set2
mod3 = set1 > set2
print(mod3)
print(mod2)
print(mod1)
print(intersect)

#funtion

def hello(name, age):
  print('hello' + name + ",you are" +  str(age) +  "years old")
hello("Beau", 39)

def change(value):
  value = 2
val = 1
change (val)
print(val)

#funtions

def hello(name):
  print('hello' + name + '!')
  return name, "beau",8
  print(hello("syd"))

#funtions

def counter():
    count = 0
    def increment():
      nonlocal count
      count = count + 1
      return count

    return increment
increment = counter()
print(increment()) #1
print(increment()) #2
print(increment()) #3

#Objects
items = [1, 2]
items.append(3)
items.pop()
print(id(items))

#Loops

count = 0
while count < 10:
  print("The condition is True")
  count = count + 1

  print("After the loop")

#Loops

for item in range(15):
  print(item)
items = [1, 2, 3, 4]
for index, item in enumerate(items):
  print(index, item)

#Classes

class Animal:
  def walk(self):
    print("walking...")

class Dog(Animal):
  def __init__(self, name, age):
    self.name = name
    self.age = age

  def bark(self):
    print("woof!")

roger = Dog("Roger", 8)

print(roger.name)
print(roger.age)
roger.bark()
roger.walk()

#Lambda Function

lambda num : num * 2

multiply = lambda a, b : a * b

print(multiply(2, 4))

#map(), filter(), reduce()

numbers = [1, 2,  3]

def double(a):
  return a * 2

result = map(double, numbers)

print(list(result))